[package]
name = "wasmer"
version = "2.2.1"
description = "High-performance WebAssembly runtime"
categories = ["wasm"]
keywords = ["wasm", "webassembly", "runtime", "vm"]
authors = ["Wasmer Engineering Team <engineering@wasmer.io>"]
repository = "https://github.com/wasmerio/wasmer"
license = "MIT"
readme = "README.md"
edition = "2018"

#####
# This crate comes in 2 major flavors:
#
# - `sys`, where `wasmer` will be compiled to a native executable
#    which provides compilers, engines, a full VM etc.
# - `js`, where `wasmer` will be compiled to WebAssembly to run in a
#   JavaScript host.
#####

# Shared dependencies.
[dependencies]
# - Mandatory shared dependencies.
wasmer-artifact = { path = "../artifact", version = "=2.2.1" }
indexmap = { version = "1.6", features = ["serde-1"] }
cfg-if = "1.0"
thiserror = "1.0"
more-asserts = "0.2"
# - Optional shared dependencies.
wat = { version = "1.0", optional = true }

# Dependencies and Development Dependencies for `sys`.
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# - Mandatory dependencies for `sys`.
wasmer-vm = { path = "../vm", version = "=2.2.1" }
wasmer-compiler = { path = "../compiler", version = "=2.2.1" }
wasmer-derive = { path = "../derive", version = "=2.2.1" }
wasmer-engine = { path = "../engine", version = "=2.2.1" }
wasmer-types = { path = "../types", version = "=2.2.1" }
target-lexicon = { version = "0.12.2", default-features = false }
loupe = "0.1"
# - Optional dependencies for `sys`.
wasmer-compiler-singlepass = { path = "../compiler-singlepass", version = "=2.2.1", optional = true }
wasmer-compiler-cranelift = { path = "../compiler-cranelift", version = "=2.2.1", optional = true }
wasmer-compiler-llvm = { path = "../compiler-llvm", version = "=2.2.1", optional = true }
wasmer-engine-universal = { path = "../engine-universal", version = "=2.2.1", optional = true }
wasmer-engine-dylib = { path = "../engine-dylib", version = "=2.2.1", optional = true }
# - Mandatory dependencies for `sys` on Windows.
[target.'cfg(all(not(target_arch = "wasm32"), target_os = "windows"))'.dependencies]
winapi = "0.3"
# - Development Dependencies for `sys`.
[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
wat = "1.0"
tempfile = "3.3"
anyhow = "1.0"

# Dependencies and Develoment Dependencies for `js`.
[target.'cfg(target_arch = "wasm32")'.dependencies]
# - Mandatory dependencies for `js`.
wasmer-types = { path = "../types", version = "=2.2.1", default-features = false, features = ["std"] }
wasm-bindgen = { version = "0.2.74", optional = true }
js-sys = { version = "0.3.51", optional = true }
wasmer-derive = { path = "../derive", version = "=2.2.1" }
# - Optional dependencies for `js`.
wasmparser = { version = "0.78", default-features = false, optional = true }
hashbrown = { version = "0.11", optional = true }
wasmer-compiler = { path = "../compiler", version = "=2.2.1", optional = true }
wasmer-engine = { path = "../engine", version = "=2.2.1", optional = true }
wasmer-engine-universal = { path = "../engine-universal", version = "=2.2.1", optional = true }
wasmer-compiler-singlepass = { path = "../compiler-singlepass", version = "=2.2.1", optional = true, default-features = false, features = ["wasm"] }
wasmer-fakevm = { path = "../fakevm", version = "=2.2.1", optional = true }
loupe = { version = "0.1", optional = true }
target-lexicon = { version = "0.12.2", default-features = false, optional = true }

# - Development Dependencies for `js`.
[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wat = "1.0"
anyhow = "1.0"
wasm-bindgen-test = "0.3.0"

# Specific to `js`.
#
# `wasm-opt` is on by default in for the release profile, but it can be
# disabled by setting it to `false`
[package.metadata.wasm-pack.profile.release]
wasm-opt = false

[badges]
maintenance = { status = "actively-developed" }

[features]
default = ["sys-default"]
std = []
core = ["hashbrown"]

# Features for `sys`.
sys = []
sys-default = ["sys", "wat", "default-cranelift", "default-universal"]
# - Compilers.
compiler = [
    "sys",
    "wasmer-compiler/translator",
    "wasmer-engine-universal/compiler",
    "wasmer-engine-dylib/compiler",
]
compiler-wasm = [
    "wasm",
    "loupe",
    "target-lexicon",
    "wasmer-fakevm",
    "wasmer-engine",
    "wasmer-compiler/translator",
    "wasmer-engine-universal/compiler",
    "wasmer-engine-dylib/compiler",
]
    singlepass = [
        "compiler",
        "wasmer-compiler-singlepass",
    ]
    singlepass-wasm = [
        "compiler-wasm",
        "wasmer-compiler-singlepass",
    ]
    cranelift = [
        "compiler",
        "wasmer-compiler-cranelift",
    ]
    llvm = [
        "compiler",
        "wasmer-compiler-llvm",
    ]
default-compiler = []
    default-singlepass = [
        "default-compiler",
        "singlepass",
    ]
    default-cranelift = [
        "default-compiler",
        "cranelift",
    ]
    default-llvm = [
        "default-compiler",
        "llvm",
    ]
default-compiler-wasm = []
    default-singlepass-wasm = [
        "default-compiler-wasm",
        "singlepass-wasm",
    ]
# - Engines.
engine = ["sys"]
    universal = [
        "engine",
        "wasmer-engine-universal",
    ]
    dylib = [
        "engine",
        "wasmer-engine-dylib",
    ]
default-engine = []
    default-universal = [
        "default-engine",
        "universal",
    ]
    default-dylib = [
        "default-engine",
        "dylib",
    ]
default-engine-wasm = []
    default-universal-wasm = [
        "default-engine-wasm",
        "universal-wasm",
    ]
engine-wasm = ["wasm"]
    universal-wasm = [
        "engine-wasm",
        "wasmer-engine-universal",
    ]
# - Experimental / in-development features
experimental-reference-types-extern-ref = [
    "sys",
    "wasmer-types/experimental-reference-types-extern-ref",
]
# - Deprecated features.
jit = ["universal"]
native = ["dylib"]

# Features for `js`.
js = []
js-default = ["js", "std", "js-types-polyfill", "wasm-bindgen", "js-sys"]

js-types-polyfill = ["js", "wasmparser"]

js-serializable-module = []

# Features for `wasm`.
wasm-types-polyfill = ["wasm", "wasmparser"]
wasm = ["default-compiler-wasm", "singlepass-wasm", "default-universal-wasm", "default-singlepass-wasm"]
wasm-default = ["wasm", "std"]

wasm-serializable-module = []

[package.metadata.docs.rs]
features = ["compiler", "core", "cranelift", "default-compiler", "default-dylib", "default-engine", "dylib", "engine", "jit", "native", "singlepass", "sys", "sys-default", "universal", "wasm", "wasm-default", "default-compiler-wasm", "singlepass-wasm"]
