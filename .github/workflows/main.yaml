name: core tests

env:
  RUST_BACKTRACE: 1

on:
  push:
    branches:
      - 'master'
      - 'staging'
      - 'trying'
    tags:
      # this is _not_ a regex, see: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - '[0-9]+.[0-9]+.[0-9]+*'
jobs:
  setup:
    name: Set up
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}
      DOING_RELEASE: ${{ steps.setup.outputs.DOING_RELEASE }}
    steps:
      - name: Set up env vars
        id: setup
        shell: bash
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=VERSION::${VERSION}
          DOING_RELEASE=$(echo $VERSION | grep -c '^[0-9]\+\.[0-9]\+\.[0-9]\+\(-\([a-zA-Z]\+\)?[0-9]*\)\?$' || true)
          echo ::set-output name=DOING_RELEASE::${DOING_RELEASE}
          echo $VERSION
          echo $DOING_RELEASE

  test:
    name: Test on ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, macos-arm64, windows, linux-aarch64]
        include:
          - build: linux
            os: ubuntu-18.04
            rust: 1.47.0
            llvm_url: 'https://github.com/wasmerio/llvm-custom-builds/releases/download/10.x/linux-amd64.tar.gz'
            artifact_name: 'wasmer-linux-amd64'
            cross_compilation_artifact_name: 'cross_compiled_from_linux'
            run_integration_tests: true
          - build: macos
            os: macos-latest
            rust: 1.47.0
            llvm_url: 'https://github.com/wasmerio/llvm-custom-builds/releases/download/10.x/darwin-amd64.tar.gz'
            artifact_name: 'wasmer-darwin-amd64'
            cross_compilation_artifact_name: 'cross_compiled_from_mac'
            run_integration_tests: true
          - build: macos-arm64
            os: macos-11.0
            rust: nightly
            target: aarch64-apple-darwin
            artifact_name: 'wasmer-darwin-arm64'
          - build: windows
            os: windows-latest
            rust: 1.47.0
            llvm_url: 'https://github.com/wasmerio/llvm-custom-builds/releases/download/10.x/windows-amd64.tar.gz'
            artifact_name: 'wasmer-windows-amd64'
            cross_compilation_artifact_name: 'cross_compiled_from_win'
            run_integration_tests: true
          - build: linux-aarch64
            os: [self-hosted, linux, ARM64]
            rust: 1.47.0
            llvm_url: 'https://github.com/wasmerio/llvm-custom-builds/releases/download/10.x/linux-aarch64.tar.gz'
            artifact_name: 'wasmer-linux-aarch64'
            run_integration_tests: false
    env:
      CARGO_SCCACHE_VERSION: 0.2.13
      SCCACHE_AZURE_BLOB_CONTAINER: wasmerstoragesccacheblob
      SCCACHE_AZURE_CONNECTION_STRING: ${{ secrets.SCCACHE_AZURE_CONNECTION_STRING }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up libstdc++ on Linux
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --allow-downgrades libstdc++6=8.4.0-1ubuntu1~18.04
          sudo apt-get install --reinstall g++-8
        if: matrix.os == 'ubuntu-18.04'
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Setup Rust target
        run: |
          cat << EOF > .cargo/config.toml
          [build]
          target = "${{ matrix.target }}"
          EOF
        if: matrix.target
      - uses: Swatinem/rust-cache@v1
      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          choco install llvm
      - name: Install LLVM
        if: matrix.os != 'windows-latest' && matrix.os != 'macos-11.0'
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -sSf ${{ matrix.llvm_url }} -L -o llvm.tar.gz
          mkdir ${{ env.LLVM_DIR }}
          tar xf llvm.tar.gz --strip-components=1 -C ${{ env.LLVM_DIR }}
          echo "${{ env.LLVM_DIR }}/bin" >> $GITHUB_PATH
          echo "LLVM_SYS_100_PREFIX=${{ env.LLVM_DIR }}" >> $GITHUB_ENV
        env:
          LLVM_DIR: ${{ github.workspace }}/llvm-10
      - name: Set up dependencies for Mac OS
        run: |
          brew install automake
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-11.0'
      - name: Test
        run: |
          make test
        if: matrix.target != 'aarch64-apple-darwin'
      - name: Test C API
        run: |
          make test-capi
        if: matrix.os != 'windows-latest' && matrix.target != 'aarch64-apple-darwin' # we can't test yet on Apple Silicon or Windows
      - name: Build C API
        run: |
          make build-capi
        if: matrix.os != 'windows-latest' && matrix.target != 'aarch64-apple-darwin'
      - name: Build C API
        run: |
          make build-capi-cranelift-system-libffi
        if: matrix.target == 'aarch64-apple-darwin'
      - name: Build C API on Windows
        run: make build-capi
        if: matrix.os == 'windows-latest'
      - name: Build Wasmer binary
        run: |
          make build-wasmer
      - name: Build Wapm binary
        run: |
          make build-wapm
        if: needs.setup.outputs.DOING_RELEASE == '1'
      - name: Copy target binaries
        run: |
          mkdir -p target/release
          cp target/${{matrix.target}}/release/wasmer* target/release
          cp target/${{matrix.target}}/release/libwasmer* target/release
          if [ -d "wapm-cli" ]; then
            mkdir -p wapm-cli/target/release 
            cp wapm-cli/target/${{matrix.target}}/release/wapm* wapm-cli/target/release
          fi
        if: matrix.target
      - name: Dist
        run: |
          make distribution
      - name: Run integration tests (Windows)
        shell: cmd
        run: |
          call refreshenv
          set WASMER_DIR=%CD%\package
          make test-integration
        if: matrix.run_integration_tests && matrix.os == 'windows-latest'
      - name: Run integration tests (Unix)
        run: |
          export WASMER_DIR=`pwd`/package
          make test-integration
        if: matrix.run_integration_tests && matrix.os != 'windows-latest'
      - name: Cross compile from Linux
        if: matrix.os == 'ubuntu-18.04'
        shell: bash
        run: |
          ls target/release
          alias wasmer=target/release/wasmer
          ./target/release/wasmer compile --target=x86_64-apple-darwin tests/integration/cli/assets/qjs.wasm -o qjs_mac_from_linux.wjit
          #./target/release/wasmer compile --target=x86_64-pc-windows-msvc tests/integration/cli/assets/qjs.wasm -o qjs_win_from_linux.wjit
          mkdir cross
          cp qjs_mac_from_linux.wjit cross
          #cp qjs_win_from_linux.wjit cross
          cp target/release/wasmer cross
      - name: Cross compile from Mac
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          ls target/release
          alias wasmer=target/release/wasmer
          ./target/release/wasmer compile --target=x86_64-unknown-linux-gnu tests/integration/cli/assets/qjs.wasm -o qjs_linux_from_mac.wjit
          #./target/release/wasmer compile --target=x86_64-pc-windows-msvc tests/integration/cli/assets/qjs.wasm -o qjs_win_from_mac.wjit
          mkdir cross
          cp qjs_linux_from_mac.wjit cross
          #cp qjs_win_from_mac.wjit cross
          cp target/release/wasmer cross
      #- name: Cross compile from Windows
      #  if: matrix.os == 'windows-latest'
      #  shell: bash
      #  run: |
      #    alias wasmer=target/release/wasmer
      #    ./target/release/wasmer compile --target=x86_64-unknown-linux-gnu tests/integration/cli/assets/qjs.wasm -o qjs_linux_from_win.wjit
      #    ./target/release/wasmer compile --target=x86_64-apple-darwin tests/integration/cli/assets/qjs.wasm -o qjs_mac_from_win.wjit
      #    mkdir cross
      #    cp qjs_linux_from_win.wjit cross
      #    cp qjs_mac_from_win.wjit cross
      #    cp target/release/wasmer.exe cross
      - name: Upload Cross Compiled Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.cross_compilation_artifact_name }}
          path: cross
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: dist

  test-cross-compile-on-linux:
    name: Test cross-compile on linux
    needs: [setup, test]
    runs-on: ubuntu-latest
    steps:
      - name: Download Wasmer
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Run it
        run: |
          cp artifacts/cross_compiled_from_linux/wasmer .
          chmod +x wasmer
          OUTPUT=$(./wasmer run artifacts/cross_compiled_from_mac/qjs_linux_from_mac.wjit -- --eval "function greet(name) { return JSON.stringify('Hello, ' + name); }; print(greet('World'));")
          [[ "$OUTPUT" == '"Hello, World"' ]]
          #wasmer run artifacts/cross/cross_compiled_from_win/qjs_linux_from_win.wjit -- --eval "function greet(name) { return JSON.stringify('Hello, ' + name); }; print(greet('World'));"

  test-cross-compile-on-mac:
    name: Test cross-compile on macos
    needs: [setup, test]
    runs-on: macos-latest
    steps:
      - name: Download Wasmer
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Run it
        run: |
          cp artifacts/cross_compiled_from_mac/wasmer .
          chmod +x wasmer
          OUTPUT=$(./wasmer run artifacts/cross_compiled_from_linux/qjs_mac_from_linux.wjit -- --eval "function greet(name) { return JSON.stringify('Hello, ' + name); }; print(greet('World'));")
          [[ "$OUTPUT" == '"Hello, World"' ]]
          #wasmer run artifacts/cross/cross_compiled_from_win/qjs_mac_from_win.wjit -- --eval "function greet(name) { return JSON.stringify('Hello, ' + name); }; print(greet('World'));"
          
  #test-cross-compile-on-win:
  #  needs: [setup, test]
  #  runs-on: windows-latest
  #  steps:
  #    - name: Download Wasmer
  #      uses: actions/download-artifact@v2
  #      with:
  #        path: artifacts
  #    - name: Run it
  #      shell: bash
  #      run: |
  #        alias wasmer=artifacts/cross/cross_compiled_from_win/wasmer.exe
  #        wasmer run artifacts/cross/cross_compiled_from_linux/win_from_linux.wjit -- --eval "function greet(name) { return JSON.stringify('Hello, ' + name); }; print(greet('World'));"
  #        wasmer run artifacts/cross/cross_compiled_from_mac/win_from_mac.wjit -- --eval "function greet(name) { return JSON.stringify('Hello, ' + name); }; print(greet('World'));"

  release:
    needs: [setup, test, test-cross-compile-on-linux, test-cross-compile-on-mac] #, test-cross-compile-on-win]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.DOING_RELEASE == '1'
    steps:
      - name: Download the Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.VERSION }}
          release_name: Release ${{ needs.setup.outputs.VERSION }}
          draft: true
          prerelease: false
      - name: Upload Release Asset Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/wasmer-windows-amd64/WasmerInstaller.exe
          asset_name: wasmer-windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Release Asset Linux amd64
        id: upload-release-asset-linux-amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-linux-amd64/wasmer.tar.gz
          asset_name: wasmer-linux-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Mac amd64
        id: upload-release-asset-mac-amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-darwin-amd64/wasmer.tar.gz
          asset_name: wasmer-darwin-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Mac arm64
        id: upload-release-asset-mac-arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-darwin-amd64/wasmer.tar.gz
          asset_name: wasmer-darwin-arm64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Linux aarch64
        id: upload-release-asset-linux-aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-linux-aarch64/wasmer.tar.gz
          asset_name: wasmer-linux-aarch64.tar.gz
          asset_content_type: application/gzip

  audit:
    name: Audit
    env:
      CARGO_AUDIT_VERSION: 0.12.0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@master
        with:
          path: ${{ runner.tool_cache }}/cargo-audit
          key: cargo-audit-bin-${{ env.CARGO_AUDIT_VERSION }}
      - run: |
          echo "${{ runner.tool_cache }}/cargo-audit/bin" >> $GITHUB_PATH
      - run: |
          cargo install cargo-audit --version ${{ env.CARGO_AUDIT_VERSION }} --root ${{ runner.tool_cache }}/cargo-audit
          cargo audit
