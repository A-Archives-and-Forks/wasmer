name: test-sys

on:
  push:
    branches:
      - '**'
      - '!master'
    pull_request:
        types: [ synchronize ]
  workflow_dispatch:
    inputs:
      release:
          description: 'Make release'
env:
  RUST_BACKTRACE: 1

jobs:

  setup:
    name: Set up
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}
      DOING_RELEASE: ${{ steps.setup.outputs.DOING_RELEASE }}
    steps:
      - name: Set up env vars
        id: setup
        shell: bash
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=VERSION::${VERSION}
          DOING_RELEASE=$(echo $VERSION | grep -c '^[0-9]\+\.[0-9]\+\.[0-9]\+\(-\([a-zA-Z]\+\)\?[0-9]*\)\?$' || true)
          echo ::set-output name=DOING_RELEASE::${DOING_RELEASE}
          echo $VERSION
          echo $DOING_RELEASE

  lint:
    name: Code lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
          components: rustfmt, clippy
      - name: Install LLVM (Linux)
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz -L -o /opt/llvm.tar.xz
          mkdir -p /opt/llvm-12
          tar xf /opt/llvm.tar.xz --strip-components=1 -C /opt/llvm-12
          echo '/opt/llvm-12/bin' >> $GITHUB_PATH
          echo 'LLVM_SYS_120_PREFIX=/opt/llvm-12' >> $GITHUB_ENV
      - run: make lint
        env:
          ENABLE_CRANELIFT: "1"
          ENABLE_LLVM: "1"
          ENABLE_SINGLEPASS: "1"
      - name: Assert no files have changed
        run: |
          git status
          ! [[ $(git status -s) ]]

  cargo_deny:
    name: cargo-deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1

  test_nodejs:
    name: Test on NodeJS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: Install NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Install wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: cargo xtask test-js
        run: |
          cargo test-js-core
      - name: cargo xtask build-wasmer
        run: |
          cargo test-js-core

  test_wasm_build:
    name: Test wasm build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          rustup target add wasm32-wasi
          make build-wasmer-wasm

  # build-wasmer: run build-wasmer and build-capi for every OS in parallel
  build_wasmer_linux_x64:
    name: build wasmer on linux-x86_64-gnu
    runs-on: ubuntu-18.04
    steps: 
      - uses: actions/checkout@v3
      - name: Set up libstdc++ on Linux
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --allow-downgrades libstdc++6=8.4.0-1ubuntu1~18.04
          sudo apt-get install --reinstall g++-8
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: Install LLVM
        shell: bash
        run: |
          LLVM_DIR=$(pwd)/${{ env.LLVM_DIR }}
          mkdir -p ${LLVM_DIR}
          curl --proto '=https' --tlsv1.2 -sSf "${{ env.LLVM_URL }}" -L -o - | tar xJv -C ${LLVM_DIR}
          echo "${LLVM_DIR}/bin" >> $GITHUB_PATH
          echo "LLVM_SYS_120_PREFIX=${LLVM_DIR}" >> $GITHUB_ENV
        env:
          LLVM_DIR: .llvm
          LLVM_URL: https://github.com/wasmerio/llvm-custom-builds/releases/download/13.x/llvm-linux-amd64.tar.xz
      - name: cargo xtask build-wasmer
        run: |
          cargo build-wasmer
        env:
          COMPILERS: cranelift,llvm,singlepass
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasmer-cli-x86_64-unknown-linux-gnu
          path: build-wasmer.tar.gz
          if-no-files-found: error
          retention-days: 2

  build_wasmer_linux_musl:
    name: build wasmer on linux-x86_64-musl
    runs-on: ubuntu-latest
    container: alpine:latest
    steps: 
      - uses: actions/checkout@v3
      - name: Set up base deps on musl
        run: |
            apk add build-base bash musl-dev curl make libtool libffi-dev gcc automake autoconf git openssl-dev g++
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask build-wasmer
        run: |
          cargo build-wasmer
        env:
          COMPILERS: cranelift,singlepass # no llvm
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasmer-cli-x86_64-unknown-linux-musl
          path: build-wasmer.tar.gz
          if-no-files-found: error
          retention-days: 2

  build_wasmer_macos_x86:
    name: build wasmer on macos-x86
    runs-on: macos-11 
    steps: 
      - uses: actions/checkout@v3
      - name: Set up dependencies for Mac OS
        run: |
          brew install automake
          # using gnu-tar is a workaround for https://github.com/actions/cache/issues/403
          brew install gnu-tar
          echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: Install LLVM
        shell: bash
        run: |
          LLVM_DIR=$(pwd)/${{ env.LLVM_DIR }}
          mkdir -p ${LLVM_DIR}
          curl --proto '=https' --tlsv1.2 -sSf "${{ env.LLVM_URL }}" -L -o - | tar xJv -C ${LLVM_DIR}
          echo "${LLVM_DIR}/bin" >> $GITHUB_PATH
          echo "LLVM_SYS_120_PREFIX=${LLVM_DIR}" >> $GITHUB_ENV
        env:
          LLVM_DIR: .llvm
          LLVM_URL: https://github.com/wasmerio/llvm-custom-builds/releases/download/13.x/llvm-darwin-amd64.tar.xz
      - name: cargo xtask build-wasmer
        run: |
          cargo build-wasmer
        env:
          COMPILERS: cranelift,llvm,singlepass
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasmer-cli-x86_64-x86_64-apple-darwin
          path: build-wasmer.tar.gz
          if-no-files-found: error
          retention-days: 2
  
  build_wasmer_macos_arm:
    name: build wasmer on macos-arm
    runs-on: macos-11.0
    steps: 
      - uses: actions/checkout@v3
      - name: Set up dependencies for Mac OS
        run: |
          brew install automake
          # using gnu-tar is a workaround for https://github.com/actions/cache/issues/403
          brew install gnu-tar
          echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
          target: aarch64-apple-darwin
      - name: Install LLVM
        shell: bash
        run: |
          brew install llvm@13
          LLVM_DIR=$(brew --cellar llvm)
          echo "${LLVM_DIR}/13.0.0/bin" >> $GITHUB_PATH
          echo "LLVM_SYS_120_PREFIX=${LLVM_DIR}" >> $GITHUB_ENV
      - name: cargo xtask build-wasmer
        run: |
          cargo build-wasmer
        env:
          COMPILERS: cranelift,llvm,singlepass
          CARGO_TARGET: aarch64-apple-darwin
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasmer-cli-aarch64-apple-darwin
          path: build-capi.tar.gz
          if-no-files-found: error
          retention-days: 2

  build_wasmer_windows_x86:
    name: build wasmer on windows-x64
    runs-on: windows-2019
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: Install LLVM
        shell: bash
        run: |
          choco install llvm --version ${{ env.LLVM_VERSION }} --allow-downgrade
          cd 'C:\Program Files\LLVM\'
          LLVM_DIR=$(pwd)
          echo "LLVM_SYS_120_PREFIX=${LLVM_DIR}" >> $GITHUB_ENV
        env:
          LLVM_VERSION: 13.0.0
      - name: cargo xtask build-wasmer
        run: |
          cargo build-wasmer
        env:
          COMPILERS: cranelift,llvm,singlepass
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasmer-cli-x86_64-pc-windows-msvc
          path: build-capi.tar.gz
          if-no-files-found: error
          retention-days: 2

  # todo: build wasmer headless

  # build-capi: run build-capi for every OS, does NOT depend on build-wasmer
  # (can run in parallel with build-wasmer step)

  build_capi_linux_x64:
    name: build capi on linux-x86_64-gnu
    runs-on: ubuntu-18.04
    steps: 
      - uses: actions/checkout@v3
      - name: Set up libstdc++ on Linux
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --allow-downgrades libstdc++6=8.4.0-1ubuntu1~18.04
          sudo apt-get install --reinstall g++-8
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask build-capi
        run: |
          cargo build-capi
        env:
          COMPILERS: cranelift,singlepass
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: capi-x86_64-unknown-linux-gnu
          path: build-capi.tar.gz
          if-no-files-found: error
          retention-days: 2

  build_capi_linux_musl:
    name: build capi on linux-x86_64-musl
    runs-on: ubuntu-latest
    container: alpine:latest
    steps: 
      - uses: actions/checkout@v3
      - name: Set up base deps on musl
        run: |
            apk add build-base bash musl-dev curl make libtool libffi-dev gcc automake autoconf git openssl-dev g++
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask build-capi
        run: |
          cargo build-capi
        env:
          COMPILERS: cranelift,singlepass
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: capi-x86_64-unknown-linux-musl
          path: build-capi.tar.gz
          if-no-files-found: error
          retention-days: 2

  build_capi_macos_x86:
    name: build capi on macos-aarch64
    runs-on: macos-11 
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask build-capi
        run: |
          cargo build-capi
        env:
          COMPILERS: cranelift,singlepass
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: capi-x86_64-apple-darwin
          path: build-capi.tar.gz
          if-no-files-found: error
          retention-days: 2

  build_capi_macos_arm:
    name: build capi on macos-arm
    runs-on: macos-11.0
    steps: 
      - uses: actions/checkout@v3
      - name: Set up dependencies for Mac OS
        run: |
          brew install automake
          # using gnu-tar is a workaround for https://github.com/actions/cache/issues/403
          brew install gnu-tar
          echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
          target: aarch64-apple-darwin
      - name: cargo xtask build-capi
        run: |
          cargo build-capi
        env:
          COMPILERS: cranelift,singlepass
          CARGO_TARGET: aarch64-apple-darwin
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: capi-aarch64-apple-darwin
          path: build-capi.tar.gz
          if-no-files-found: error
          retention-days: 2

  build_capi_windows_x86:
    name: build capi on windows-x64
    runs-on: windows-2019
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask build-capi
        run: |
          cargo build-capi
        env:
          COMPILERS: cranelift,singlepass
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: capi-x86_64-pc-windows-msvc
          path: build-capi.tar.gz
          if-no-files-found: error
          retention-days: 2

  # test-wasmer: run unit tests for wasmer, depends on build-wasmer step
  # (can run in parallel with build-capi step)

  # NOTE: testing is decoupled from building because when we do a release
  # we don't have to go through the "testing" phase again since we assume 
  # that master is green
  test_wasmer_linux_x64:
    name: test wasmer on linux-x86_64-gnu
    runs-on: ubuntu-18.04
    steps: 
      - uses: actions/checkout@v3
      - name: Set up libstdc++ on Linux
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --allow-downgrades libstdc++6=8.4.0-1ubuntu1~18.04
          sudo apt-get install --reinstall g++-8
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: Install LLVM
        shell: bash
        run: |
          LLVM_DIR=$(pwd)/${{ env.LLVM_DIR }}
          mkdir -p ${LLVM_DIR}
          curl --proto '=https' --tlsv1.2 -sSf "${{ env.LLVM_URL }}" -L -o - | tar xJv -C ${LLVM_DIR}
          echo "${LLVM_DIR}/bin" >> $GITHUB_PATH
          echo "LLVM_SYS_120_PREFIX=${LLVM_DIR}" >> $GITHUB_ENV
        env:
          LLVM_DIR: .llvm
          LLVM_URL: https://github.com/wasmerio/llvm-custom-builds/releases/download/13.x/llvm-linux-amd64.tar.xz
      - name: cargo xtask test-wasmer
        run: |
          cargo test-wasmer
        env:
          COMPILERS: cranelift,llvm,singlepass

  test_wasmer_linux_musl:
    name: test wasmer on linux-x86_64-musl
    runs-on: ubuntu-latest
    container: alpine:latest
    steps: 
      - uses: actions/checkout@v3
      - name: Set up base deps on musl
        run: |
            apk add build-base bash musl-dev curl make libtool libffi-dev gcc automake autoconf git openssl-dev g++
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask test-wasmer
        run: |
          cargo test-wasmer
        env:
          COMPILERS: cranelift,singlepass # no llvm

  test_wasmer_macos_x86:
    name: test wasmer on macos-x86
    runs-on: macos-11 
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: Install LLVM
        shell: bash
        run: |
          LLVM_DIR=$(pwd)/${{ env.LLVM_DIR }}
          mkdir -p ${LLVM_DIR}
          curl --proto '=https' --tlsv1.2 -sSf "${{ env.LLVM_URL }}" -L -o - | tar xJv -C ${LLVM_DIR}
          echo "${LLVM_DIR}/bin" >> $GITHUB_PATH
          echo "LLVM_SYS_120_PREFIX=${LLVM_DIR}" >> $GITHUB_ENV
        env:
          LLVM_DIR: .llvm
          LLVM_URL: https://github.com/wasmerio/llvm-custom-builds/releases/download/13.x/llvm-darwin-amd64.tar.xz
      - name: cargo xtask test-wasmer
        run: |
          cargo test-wasmer
        env:
          COMPILERS: cranelift,llvm,singlepass

  test_wasmer_macos_arm:
    name: test wasmer on macos-x86
    runs-on: macos-11 
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
          target: aarch64-apple-darwin
      - name: Install LLVM
        shell: bash
        run: |
          brew install llvm@13.0.0
          LLVM_DIR=$(brew --cellar llvm)
          echo "${LLVM_DIR}/13.0.0/bin" >> $GITHUB_PATH
          echo "LLVM_SYS_120_PREFIX=${LLVM_DIR}" >> $GITHUB_ENV
      - name: cargo xtask test-wasmer
        run: |
          cargo test-wasmer
        env:
          COMPILERS: cranelift,llvm,singlepass

  test_wasmer_windows_x86:
    name: test wasmer on windows-x64
    runs-on: windows-2019
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: Install LLVM
        shell: bash
        run: |
          choco install llvm --version ${{ env.LLVM_VERSION }} --allow-downgrade
          cd 'C:\Program Files\LLVM\'
          LLVM_DIR=$(pwd)
          echo "LLVM_SYS_120_PREFIX=${LLVM_DIR}" >> $GITHUB_ENV
        env:
          LLVM_VERSION: 13.0.0
      - name: cargo xtask test-wasmer
        run: |
          cargo test-wasmer
        env:
          COMPILERS: cranelift,llvm,singlepass

  # test-capi: run unit test for capi, depends on build-capi step
  # (can run in parallel with build-wasmer step)
  test_capi_linux_x64:
    name: test capi on linux-x86_64-gnu
    runs-on: ubuntu-18.04
    steps: 
      - uses: actions/checkout@v3
      - name: Set up libstdc++ on Linux
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --allow-downgrades libstdc++6=8.4.0-1ubuntu1~18.04
          sudo apt-get install --reinstall g++-8
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask test-capi
        run: |
          cargo test-capi
        env:
          COMPILERS: cranelift,singlepass

  test_capi_linux_musl:
    name: test capi on linux-x86_64-musl
    runs-on: ubuntu-latest
    container: alpine:latest
    steps: 
      - uses: actions/checkout@v3
      - name: Set up base deps on musl
        run: |
            apk add build-base bash musl-dev curl make libtool libffi-dev gcc automake autoconf git openssl-dev g++
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask test-capi
        run: |
          cargo test-capi
        env:
          COMPILERS: cranelift,singlepass

  test_capi_macos_x86:
    name: test capi on macos-x86
    runs-on: macos-11 
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask test-capi
        run: |
          cargo test-capi
        env:
          COMPILERS: cranelift,singlepass

  test_capi_macos_arm:
    name: test capi on macos-arm
    runs-on: macos-11.0
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
          target: aarch64-apple-darwin
      - name: cargo xtask test-capi
        run: |
          cargo test-capi
        env:
          COMPILERS: cranelift,singlepass

  test_capi_windows_x86:
    name: test capi on windows-x64
    runs-on: windows-2019
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask test-capi
        run: |
          cargo test-capi
        env:
          COMPILERS: cranelift,singlepass

  # test-integration-cli: run integration tests for wasmer, depends on build-capi and build-wasmer steps
  test_integration_linux_x64:
    name: integration tests on linux-x86_64-gnu
    runs-on: ubuntu-18.04
    needs: [build_wasmer_linux_x64, build_capi_linux_x64]
    steps: 
      - uses: actions/checkout@v3
      - name: Set up libstdc++ on Linux
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --allow-downgrades libstdc++6=8.4.0-1ubuntu1~18.04
          sudo apt-get install --reinstall g++-8
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask test-integration
        run: |
          cargo test-integration

  test_integration_linux_musl:
    name: integration tests on linux-x86_64-musl
    runs-on: ubuntu-latest
    needs: [build_wasmer_linux_musl, build_capi_linux_musl]
    container: alpine:latest
    steps: 
      - uses: actions/checkout@v3
      - name: Set up base deps on musl
        run: |
            apk add build-base bash musl-dev curl make libtool libffi-dev gcc automake autoconf git openssl-dev g++
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask test-integration
        run: |
          cargo test-integration
  
  test_integration_macos_x86:
    name: integration tests on macos-x86
    runs-on: macos-11 
    needs: [build_wasmer_macos_x86, build_capi_macos_x86]
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask test-integration
        run: |
          cargo test-integration

  test_integration_windows_x86:
    name: integration tests on windows-x64
    runs-on: windows-2019
    needs: [build_wasmer_windows_x86, build_capi_windows_x86]
    steps: 
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
      - name: cargo xtask test-integration
        run: |
          cargo test-integration

  # release step, only run if DOING_RELEASE is present
  release:
    # needs: [setup, build, linux_aarch64, windows_gnu]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.DOING_RELEASE == '1' || github.event.inputs.release != ''
    steps:
      - name: Download the Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.VERSION }}
          release_name: Release ${{ needs.setup.outputs.VERSION }}
          draft: true
          prerelease: false
      - name: Upload Release Asset Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-windows-amd64/WasmerInstaller.exe
          asset_name: wasmer-windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Release Asset Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-windows-amd64/wasmer.tar.gz
          asset_name: wasmer-windows-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Linux amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-linux-amd64/wasmer.tar.gz
          asset_name: wasmer-linux-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Linux aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-linux-aarch64/wasmer.tar.gz
          asset_name: wasmer-linux-aarch64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Windows gnu64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-windows-gnu64/wasmer.tar.gz
          asset_name: wasmer-windows-gnu64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Linux amd64 (musl)
        id: upload-release-asset-linux-musl-amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-linux-musl-amd64/wasmer.tar.gz
          asset_name: wasmer-linux-musl-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Mac amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-darwin-amd64/wasmer.tar.gz
          asset_name: wasmer-darwin-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Mac arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-darwin-arm64/wasmer.tar.gz
          asset_name: wasmer-darwin-arm64.tar.gz
          asset_content_type: application/gzip
