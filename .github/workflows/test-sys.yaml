name: test-sys

on:
  push:
    branches:
      - '**'
      - '!master'
    pull_request:
        types: [ synchronize ]

env:
  RUST_BACKTRACE: 1

jobs:

  check_linux_x64:
    name: cargo check on linux-x86_64-gnu
    runs-on: ubuntu-18.04
    env:
      TARGET: linux-x86_64-gnu
    steps: 
      - uses: actions/checkout@v3
      - name: Set up libstdc++ on Linux
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --allow-downgrades libstdc++6=8.4.0-1ubuntu1~18.04
          sudo apt-get install --reinstall g++-8
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
<<<<<<< HEAD
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v1
        if: matrix.use_sccache != true
      - name: Install LLVM (Choco - Windows)
        if: matrix.llvm_choco_version
        shell: bash
        run: |
          choco install llvm --version ${{ matrix.llvm_choco_version }} --allow-downgrade
          cd 'C:\Program Files\LLVM\'
          LLVM_DIR=$(pwd)
          echo "LLVM_SYS_120_PREFIX=${LLVM_DIR}" >> $GITHUB_ENV
      - name: Install LLVM (macOS Apple Silicon)
        if: matrix.os == 'macos-11.0' && !matrix.llvm_url
        run: |
          brew install llvm
      - name: Install LLVM
        if: matrix.llvm_url
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -sSf ${{ matrix.llvm_url }} -L -o llvm.tar.xz
          LLVM_DIR=$(pwd)/${{ env.LLVM_DIR }}
          mkdir ${LLVM_DIR}
          tar xf llvm.tar.xz --strip-components=1 -C ${LLVM_DIR}
          echo "${LLVM_DIR}/bin" >> $GITHUB_PATH
          echo "LLVM_SYS_120_PREFIX=${LLVM_DIR}" >> $GITHUB_ENV
        env:
          LLVM_DIR: .llvm
      - name: Set up dependencies for Mac OS
        run: |
          brew install automake
          # using gnu-tar is a workaround for https://github.com/actions/cache/issues/403
          brew install gnu-tar
          echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-11.0'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.build }}-${{ matrix.target }}-cargo-${{ hashFiles('Cargo.lock') }}-v1
      - uses: actions/cache@v2
        if: matrix.use_sccache
        with:
          path: ${{ runner.tool_cache }}/cargo-sccache
          key: ${{ matrix.build }}-${{ matrix.target }}-sccache-bin-${{ env.CARGO_SCCACHE_VERSION }}-v1
      - name: Install sccache
        if: matrix.use_sccache
        run: |
          if [ ! -f '${{ runner.tool_cache }}/cargo-sccache/bin/sccache' ]; then
            cargo install sccache --no-default-features --features=dist-client,azure --root '${{ runner.tool_cache }}/cargo-sccache'
          fi
        shell: bash
      - name: Setup Rust target
        run: |
          mkdir -p .cargo
          cat << EOF > .cargo/config.toml
          [build]
          target = "${{ matrix.target }}"
          EOF
        if: matrix.target
      - name: Set sccache port
        if: matrix.use_sccache && matrix.random_sccache_port
        run: |
          netstat -aln | awk '
            $6 == "LISTEN" {
              if ($4 ~ "[.:][0-9]+$") {
                n = split($4, a, /[:.]/);
                port = a[n];
                p[port] = 1
              }
            }
            END {
              for (i = 3000; i < 65000 && p[i]; i++){};
              if (i == 65000) {exit 1};
              print "SCCACHE_SERVER_PORT=" i
            }
          ' >> $GITHUB_ENV
          # echo "SCCACHE_SERVER_PORT=9000"
          echo "Setting random sccache port to: $SCCACHE_SERVER_PORT"
        shell: bash
      - name: Start sccache
        if: matrix.use_sccache
        run: |
          chmod +x '${{ runner.tool_cache }}/cargo-sccache/bin/sccache'
          '${{ runner.tool_cache }}/cargo-sccache/bin/sccache' --start-server
          '${{ runner.tool_cache }}/cargo-sccache/bin/sccache' -s
          echo 'RUSTC_WRAPPER=${{ runner.tool_cache }}/cargo-sccache/bin/sccache' >> $GITHUB_ENV
        shell: bash
      - name: Test integration CLI
        if: matrix.run_test && matrix.os != 'windows-2019'
        shell: bash
        run: |
          make build-wasmer && make build-capi && make package-capi && make package && export WASMER_DIR=`pwd`/package && make test-integration-cli
        env:
          TARGET: ${{ matrix.target }}
          TARGET_DIR: target/${{ matrix.target }}/release
          CARGO_TARGET: --target ${{ matrix.target }}
          WAPM_DEV_TOKEN: ${{ secrets.WAPM_DEV_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test integration CLI
        if: matrix.run_test && matrix.os == 'windows-2019'
        shell: bash
        run: |
          make build-wasmer && 
          cargo test --package wasmer-integration-tests-cli --test run -- test_wasmer_run_complex_url --exact --nocapture
        env:
          TARGET: ${{ matrix.target }}
          TARGET_DIR: target/${{ matrix.target }}/release
          CARGO_TARGET: --target x86_64-pc-windows-msvc
          WAPM_DEV_TOKEN: ${{ secrets.WAPM_DEV_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # cargo test --package wasmer-integration-tests-cli --test run -- test_wasmer_run_complex_url --exact --nocapture
      #- name: Test integration CLI
      #  if: matrix.run_test && matrix.os == 'windows-2019'
      #  shell: bash
      #  run: |
      #    make && make build-wasmer && make build-capi && make package-capi && make package
      #    export WASMER_DIR=`pwd`/package
      #    make test-integration-cli
      #  env:
      #    TARGET: x86_64-pc-windows-msvc
      #    TARGET_DIR: target/x86_64-pc-windows-msvc/release
      #    CARGO_TARGET: --target x86_64-pc-windows-msvc
      - name: Test
        if: matrix.run_test && matrix.os != 'windows-2019'
        run: |
          make
        env:
          TARGET: ${{ matrix.target }}
          TARGET_DIR: target/${{ matrix.target }}/release
          CARGO_TARGET: --target ${{ matrix.target }}
      - name: Test
        if: matrix.run_test && matrix.os != 'windows-2019'
        run: |
          make build-capi && make package-capi && export WASMER_DIR=`pwd`/package && make test
        env:
          TARGET: ${{ matrix.target }}
          TARGET_DIR: target/${{ matrix.target }}/release
          CARGO_TARGET: --target ${{ matrix.target }}
      - name: Test C API
        if: matrix.run_test_capi && matrix.os != 'windows-2019'
        run: |
          make test-capi
        env:
          TARGET: ${{ matrix.target }}
          TARGET_DIR: target/${{ matrix.target }}/release
          CARGO_TARGET: --target ${{ matrix.target }}
      - name: Test
        if: matrix.run_test && matrix.os == 'windows-2019'
        shell: bash
        run: |
          make build-capi && make package-capi && export WASMER_DIR=`pwd`/package && make test
      - name: Test C API
        if: matrix.run_test_capi && matrix.os == 'windows-2019'
        shell: bash
        run: |
          export WASMER_DIR=`pwd`/package && make test-capi
      - name: Build Doc
        if: matrix.run_build_docs
        run: |
          make package-docs

  audit:
    name: Audit
=======
          target: linux-x86_64-gnu
      - name: Install cargo xtask
        run: |
          cargo install cargo-xtask
      - name: cargo xtask build-wasmer
        script: cargo xtaskci

  check_linux_musl:
    name: cargo check on linux-x86_64-musl
    runs-on: ubuntu-latest
    container: alpine:latest
>>>>>>> 3e578e17a5 (Remove unnecessary CI runs)
    env:
      TARGET: linux-x86_64-musl
    steps: 
      - uses: actions/checkout@v3
      - name: Set up base deps on musl
        if: matrix.build == 'linux-musl-x64'
        run: |
            apk add build-base bash musl-dev curl make libtool libffi-dev gcc automake autoconf git openssl-dev g++
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.63
          target: linux-x86_64-musl
      - name: Install cargo xtask
        run: |
          cargo install cargo-xtask
      - name: cargo xtask build-wasmer
        script: cargo xtaskci
