OKAY:
+#[non_exhaustive] pub enum wasmer::sys::MemoryAccessError
+#[repr(transparent)] pub struct wasmer::sys::FunctionEnv<T>
+#[repr(transparent)] pub struct wasmer::sys::WasmPtr<T, M: MemorySize>
pub const wasmer::sys::VERSION: &'static str
pub enum variant wasmer::sys::ExportError::IncompatibleType
pub enum variant wasmer::sys::ExportError::Missing(String)
pub enum variant wasmer::sys::Extern::Function(Function)
pub enum variant wasmer::sys::Extern::Global(Global)
pub enum variant wasmer::sys::Extern::Memory(Memory)
pub enum variant wasmer::sys::Extern::Table(Table)
pub enum variant wasmer::sys::MemoryAccessError::HeapOutOfBounds
pub enum variant wasmer::sys::MemoryAccessError::NonUtf8String
pub enum variant wasmer::sys::MemoryAccessError::Overflow

UNCHECKED SO FAR:

pub fn wasmer::sys::Extern::get_self_from_extern(_extern: &'a Self) -> Result<&'a Self, ExportError>
pub fn wasmer::sys::Extern::is_from_store(&self, store: &impl AsStoreRef) -> bool
pub fn wasmer::sys::Extern::to_vm_extern(&self) -> VMExtern
pub fn wasmer::sys::Extern::ty(&self, store: &impl AsStoreRef) -> ExternType
pub fn wasmer::sys::ExternRef::clone(&self) -> ExternRef
pub fn wasmer::sys::ExternRef::downcast<'a, T>(&self, store: &'a impl AsStoreRef) -> Option<&'a T> where T: Any + Send + Sync + 'static + Sized
pub fn wasmer::sys::ExternRef::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn wasmer::sys::ExternRef::is_from_store(&self, store: &impl AsStoreRef) -> bool
pub fn wasmer::sys::ExternRef::new<T>(store: &mut impl AsStoreMut, value: T) -> Self where T: Any + Send + Sync + 'static + Sized
pub fn wasmer::sys::FromToNativeWasmType::from_native(native: <Self as >::Native) -> Self
pub fn wasmer::sys::FromToNativeWasmType::is_from_store(&self, _store: &impl AsStoreRef) -> bool
pub fn wasmer::sys::FromToNativeWasmType::to_native(self) -> <Self as >::Native
pub fn wasmer::sys::Function::call(&self, store: &mut impl AsStoreMut, params: &[Value]) -> Result<Box<[Value]>, RuntimeError>
pub fn wasmer::sys::Function::clone(&self) -> Function
pub fn wasmer::sys::Function::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn wasmer::sys::Function::from(other: TypedFunction<Args, Rets>) -> Self
pub fn wasmer::sys::Function::get_self_from_extern(_extern: &'a Extern) -> Result<&'a Self, ExportError>
pub fn wasmer::sys::Function::is_from_store(&self, store: &impl AsStoreRef) -> bool
pub fn wasmer::sys::Function::native<Args, Rets>(&self, store: &impl AsStoreRef) -> Result<TypedFunction<Args, Rets>, RuntimeError> where Args: WasmTypeList, Rets: WasmTypeList
pub fn wasmer::sys::Function::new<FT, F>(store: &mut impl AsStoreMut, ty: FT, func: F) -> Self where FT: Into<FunctionType>, F: Fn(&[Value]) -> Result<Vec<Value>, RuntimeError> + 'static + Send + Sync
pub fn wasmer::sys::Function::new_native<F, Args, Rets>(store: &mut impl AsStoreMut, func: F) -> Self where F: HostFunction<(), Args, Rets, WithoutEnv> + 'static + Send + Sync, Args: WasmTypeList, Rets: WasmTypeList
pub fn wasmer::sys::Function::new_native_with_env<T: Send + 'static, F, Args, Rets>(store: &mut impl AsStoreMut, env: &FunctionEnv<T>, func: F) -> Self where F: HostFunction<T, Args, Rets, WithEnv> + 'static + Send + Sync, Args: WasmTypeList, Rets: WasmTypeList
pub fn wasmer::sys::Function::new_typed<F, Args, Rets>(store: &mut impl AsStoreMut, func: F) -> Self where F: HostFunction<(), Args, Rets, WithoutEnv> + 'static + Send + Sync, Args: WasmTypeList, Rets: WasmTypeList
pub fn wasmer::sys::Function::new_typed_with_env<T: Send + 'static, F, Args, Rets>(store: &mut impl AsStoreMut, env: &FunctionEnv<T>, func: F) -> Self where F: HostFunction<T, Args, Rets, WithEnv> + 'static + Send + Sync, Args: WasmTypeList, Rets: WasmTypeList
pub fn wasmer::sys::Function::new_with_env<FT, F, T: Send + 'static>(store: &mut impl AsStoreMut, env: &FunctionEnv<T>, ty: FT, func: F) -> Self where FT: Into<FunctionType>, F: Fn(FunctionEnvMut<'_, T>, &[Value]) -> Result<Vec<Value>, RuntimeError> + 'static + Send + Sync
pub fn wasmer::sys::Function::param_arity(&self, store: &impl AsStoreRef) -> usize
pub fn wasmer::sys::Function::result_arity(&self, store: &impl AsStoreRef) -> usize
pub fn wasmer::sys::Function::ty(&self, store: &impl AsStoreRef) -> FunctionType
pub fn wasmer::sys::Function::typed<Args, Rets>(&self, store: &impl AsStoreRef) -> Result<TypedFunction<Args, Rets>, RuntimeError> where Args: WasmTypeList, Rets: WasmTypeList
pub fn wasmer::sys::FunctionEnv::as_mut<'a>(&self, store: &'a mut impl AsStoreMut) -> &'a mut T where T: Any + Send + 'static + Sized
pub fn wasmer::sys::FunctionEnv::as_ref<'a>(&self, store: &'a impl AsStoreMut) -> &'a T where T: Any + Send + 'static + Sized
pub fn wasmer::sys::FunctionEnv::clone(&self) -> Self
pub fn wasmer::sys::FunctionEnv::eq(&self, other: &Self) -> bool
pub fn wasmer::sys::FunctionEnv::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn wasmer::sys::FunctionEnv::hash<H: std::hash::Hasher>(&self, state: &mut H)
pub fn wasmer::sys::FunctionEnv::into_mut(self, store: &mut impl AsStoreMut) -> FunctionEnvMut<'_, T> where T: Any + Send + 'static + Sized
pub fn wasmer::sys::FunctionEnv::new(store: &mut impl AsStoreMut, value: T) -> Self where T: Any + Send + 'static + Sized
pub fn wasmer::sys::FunctionEnvMut::as_mut(&mut self) -> FunctionEnvMut<'_, T>
pub fn wasmer::sys::FunctionEnvMut::data(&self) -> &T
pub fn wasmer::sys::FunctionEnvMut::data_mut(&mut self) -> &mut T
pub fn wasmer::sys::Global::clone(&self) -> Global
pub fn wasmer::sys::Global::eq(&self, other: &Self) -> bool
pub fn wasmer::sys::Global::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn wasmer::sys::Global::get(&self, store: &mut impl AsStoreMut) -> Value
pub fn wasmer::sys::Global::get_self_from_extern(_extern: &'a Extern) -> Result<&'a Self, ExportError>
pub fn wasmer::sys::Global::is_from_store(&self, store: &impl AsStoreRef) -> bool
pub fn wasmer::sys::Global::new(store: &mut impl AsStoreMut, val: Value) -> Self
pub fn wasmer::sys::Global::new_mut(store: &mut impl AsStoreMut, val: Value) -> Self
pub fn wasmer::sys::Global::set(&self, store: &mut impl AsStoreMut, val: Value) -> Result<(), RuntimeError>
pub fn wasmer::sys::Global::ty(&self, store: &impl AsStoreRef) -> GlobalType
pub fn wasmer::sys::HostFunction::call_trampoline_address() -> VMTrampoline
pub fn wasmer::sys::HostFunction::function_body_ptr() -> *const VMFunctionBody
pub fn wasmer::sys::Imports::clone(&self) -> Imports
pub fn wasmer::sys::Imports::contains_namespace(&self, name: &str) -> bool
pub fn wasmer::sys::Imports::default() -> Imports
pub fn wasmer::sys::Imports::define(&mut self, ns: &str, name: &str, val: impl Into<Extern>)
pub fn wasmer::sys::Imports::extend<T: IntoIterator<Item = ((String, String), Extern)>>(&mut self, iter: T)
pub fn wasmer::sys::Imports::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn wasmer::sys::Imports::get_export(&self, module: &str, name: &str) -> Option<Extern>
pub fn wasmer::sys::Imports::get_namespace_exports(&self, name: &str) -> Option<Exports>
pub fn wasmer::sys::Imports::imports_for_module(&self, module: &Module) -> Result<Vec<Extern>, LinkError>
pub fn wasmer::sys::Imports::new() -> Self
pub fn wasmer::sys::Imports::register_namespace(&mut self, ns: &str, contents: impl IntoIterator<Item = (String, Extern)>)
pub fn wasmer::sys::Instance::clone(&self) -> Instance
pub fn wasmer::sys::Instance::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn wasmer::sys::Instance::module(&self) -> &Module
pub fn wasmer::sys::Instance::new(store: &mut impl AsStoreMut, module: &Module, imports: &Imports) -> Result<Self, InstantiationError>
pub fn wasmer::sys::Instance::new_by_index(store: &mut impl AsStoreMut, module: &Module, externs: &[Extern]) -> Result<Self, InstantiationError>
pub fn wasmer::sys::InstantiationError::fmt(&self, __formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result
pub fn wasmer::sys::InstantiationError::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn wasmer::sys::InstantiationError::from(other: wasmer_compiler::InstantiationError) -> Self
pub fn wasmer::sys::InstantiationError::source(&self) -> std::option::Option<&(dyn std::error::Error + 'static)>
pub fn wasmer::sys::Memory::clone(&self) -> Memory
pub fn wasmer::sys::Memory::eq(&self, other: &Self) -> bool
pub fn wasmer::sys::Memory::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn wasmer::sys::Memory::get_self_from_extern(_extern: &'a Extern) -> Result<&'a Self, ExportError>
pub fn wasmer::sys::Memory::grow<IntoPages>(&self, store: &mut impl AsStoreMut, delta: IntoPages) -> Result<Pages, MemoryError> where IntoPages: Into<Pages>
pub fn wasmer::sys::Memory::is_from_store(&self, store: &impl AsStoreRef) -> bool
pub fn wasmer::sys::Memory::new(store: &mut impl AsStoreMut, ty: MemoryType) -> Result<Self, MemoryError>
pub fn wasmer::sys::Memory::ty(&self, store: &impl AsStoreRef) -> MemoryType
pub fn wasmer::sys::Memory::view<'a>(&'a self, store: &impl AsStoreRef) -> MemoryView<'a>
pub fn wasmer::sys::MemoryAccessError::clone(&self) -> MemoryAccessError
pub fn wasmer::sys::MemoryAccessError::fmt(&self, __formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result
pub fn wasmer::sys::MemoryAccessError::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn wasmer::sys::MemoryAccessError::from(_err: FromUtf8Error) -> Self
pub fn wasmer::sys::MemoryView::data_size(&self) -> u64
pub fn wasmer::sys::MemoryView::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn wasmer::sys::MemoryView::read(&self, offset: u64, buf: &mut [u8]) -> Result<(), MemoryAccessError>
pub fn wasmer::sys::MemoryView::read_u8(&self, offset: u64) -> Result<u8, MemoryAccessError>
pub fn wasmer::sys::MemoryView::read_uninit<'b>(&self, offset: u64, buf: &'b mut [MaybeUninit<u8>]) -> Result<&'b mut [u8], MemoryAccessError>
pub fn wasmer::sys::MemoryView::size(&self) -> Pages
pub fn wasmer::sys::MemoryView::write(&self, offset: u64, data: &[u8]) -> Result<(), MemoryAccessError>
pub fn wasmer::sys::MemoryView::write_u8(&self, offset: u64, val: u8) -> Result<(), MemoryAccessError>
pub fn wasmer::sys::Module::clone(&self) -> Module
pub fn wasmer::sys::Module::custom_sections<'a>(&'a self, name: &'a str) -> impl Iterator<Item = Box<[u8]>> + 'a
pub fn wasmer::sys::Module::exports(&self) -> ExportsIterator<impl Iterator<Item = ExportType> + '_>
pub fn wasmer::sys::Module::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn wasmer::sys::Module::from_binary(store: &impl AsStoreRef, binary: &[u8]) -> Result<Self, CompileError>
pub fn wasmer::sys::Module::from_file(store: &impl AsStoreRef, file: impl AsRef<Path>) -> Result<Self, IoCompileError>
pub fn wasmer::sys::Module::imports(&self) -> ImportsIterator<impl Iterator<Item = ImportType> + '_>
pub fn wasmer::sys::Module::name(&self) -> Option<&str>
pub fn wasmer::sys::Module::new(store: &impl AsStoreRef, bytes: impl AsRef<[u8]>) -> Result<Self, CompileError>
pub fn wasmer::sys::Module::serialize(&self) -> Result<Vec<u8>, SerializeError>
pub fn wasmer::sys::Module::serialize_to_file(&self, path: impl AsRef<Path>) -> Result<(), SerializeError>
pub fn wasmer::sys::Module::set_name(&mut self, name: &str) -> bool
pub fn wasmer::sys::Module::validate(store: &impl AsStoreRef, binary: &[u8]) -> Result<(), CompileError>
pub fn wasmer::sys::NativeWasmTypeInto::into_raw(self, store: &mut impl AsStoreMut) -> RawValue
pub fn wasmer::sys::Store::custom_trap_handler(&self, call: &dyn Fn(&TrapHandlerFn<'_>) -> bool) -> bool
pub fn wasmer::sys::Store::default() -> Self
pub fn wasmer::sys::Store::engine(&self) -> &Engine
pub fn wasmer::sys::Store::eq(&self, other: &Self) -> bool
pub fn wasmer::sys::Store::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn wasmer::sys::Store::new(engine: impl Into<Engine>) -> Self
pub fn wasmer::sys::Store::new_with_engine(engine: impl Into<Engine>) -> Self
pub fn wasmer::sys::Store::new_with_tunables(engine: impl Into<Engine>, tunables: impl Tunables + Send + Sync + 'static) -> Self
pub fn wasmer::sys::Store::same(a: &Self, b: &Self) -> bool
pub fn wasmer::sys::Store::set_trap_handler(&mut self, handler: Option<Box<TrapHandlerFn<'static>>>)
pub fn wasmer::sys::Store::tunables(&self) -> &dyn Tunables
pub fn wasmer::sys::StoreMut::engine(&self) -> &Engine
pub fn wasmer::sys::StoreMut::same(a: &Self, b: &Self) -> bool
pub fn wasmer::sys::StoreMut::tunables(&self) -> &dyn Tunables
pub fn wasmer::sys::StoreRef::engine(&self) -> &Engine
pub fn wasmer::sys::StoreRef::same(a: &Self, b: &Self) -> bool
pub fn wasmer::sys::StoreRef::signal_handler(&self) -> Option<*const TrapHandlerFn<'static>>
pub fn wasmer::sys::StoreRef::tunables(&self) -> &dyn Tunables
pub fn wasmer::sys::Table::clone(&self) -> Table
pub fn wasmer::sys::Table::copy(store: &mut impl AsStoreMut, dst_table: &Self, dst_index: u32, src_table: &Self, src_index: u32, len: u32) -> Result<(), RuntimeError>
pub fn wasmer::sys::Table::eq(&self, other: &Self) -> bool
pub fn wasmer::sys::Table::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn wasmer::sys::Table::get(&self, store: &mut impl AsStoreMut, index: u32) -> Option<Value>
pub fn wasmer::sys::Table::get_self_from_extern(_extern: &'a Extern) -> Result<&'a Self, ExportError>
pub fn wasmer::sys::Table::grow(&self, store: &mut impl AsStoreMut, delta: u32, init: Value) -> Result<u32, RuntimeError>
pub fn wasmer::sys::Table::is_from_store(&self, store: &impl AsStoreRef) -> bool
pub fn wasmer::sys::Table::new(store: &mut impl AsStoreMut, ty: TableType, init: Value) -> Result<Self, RuntimeError>
pub fn wasmer::sys::Table::set(&self, store: &mut impl AsStoreMut, index: u32, val: Value) -> Result<(), RuntimeError>
pub fn wasmer::sys::Table::size(&self, store: &impl AsStoreRef) -> u32
pub fn wasmer::sys::Table::ty(&self, store: &impl AsStoreRef) -> TableType
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, A11: A11) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, A11: A11, A12: A12) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, A11: A11, A12: A12, A13: A13) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, A11: A11, A12: A12, A13: A13, A14: A14) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, A11: A11, A12: A12, A13: A13, A14: A14, A15: A15) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, A11: A11, A12: A12, A13: A13, A14: A14, A15: A15, A16: A16) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, A11: A11, A12: A12, A13: A13, A14: A14, A15: A15, A16: A16, A17: A17) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, A11: A11, A12: A12, A13: A13, A14: A14, A15: A15, A16: A16, A17: A17, A18: A18) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, A11: A11, A12: A12, A13: A13, A14: A14, A15: A15, A16: A16, A17: A17, A18: A18, A19: A19) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::call(&self, store: &mut impl AsStoreMut, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, A11: A11, A12: A12, A13: A13, A14: A14, A15: A15, A16: A16, A17: A17, A18: A18, A19: A19, A20: A20) -> Result<Rets, RuntimeError>
pub fn wasmer::sys::TypedFunction::clone(&self) -> Self
pub fn wasmer::sys::Value::as_raw(&self, store: &impl AsStoreRef) -> RawValue
pub fn wasmer::sys::Value::clone(&self) -> Value
pub fn wasmer::sys::Value::eq(&self, o: &Self) -> bool
pub fn wasmer::sys::Value::externref(&self) -> Option<&Option<ExternRef>>
pub fn wasmer::sys::Value::f32(&self) -> Option<f32>
pub fn wasmer::sys::Value::f64(&self) -> Option<f64>
pub fn wasmer::sys::Value::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn wasmer::sys::Value::from(val: ExternRef) -> Self
pub fn wasmer::sys::Value::from(val: Function) -> Self
pub fn wasmer::sys::Value::from(val: Option<ExternRef>) -> Self
pub fn wasmer::sys::Value::from(val: Option<Function>) -> Self
pub fn wasmer::sys::Value::from(val: f32) -> Self
pub fn wasmer::sys::Value::from(val: f64) -> Self
pub fn wasmer::sys::Value::from(val: i32) -> Self
pub fn wasmer::sys::Value::from(val: i64) -> Self
pub fn wasmer::sys::Value::from(val: u32) -> Self
pub fn wasmer::sys::Value::from(val: u64) -> Self
pub fn wasmer::sys::Value::funcref(&self) -> Option<&Option<Function>>
pub fn wasmer::sys::Value::i32(&self) -> Option<i32>
pub fn wasmer::sys::Value::i64(&self) -> Option<i64>
pub fn wasmer::sys::Value::is_from_store(&self, store: &impl AsStoreRef) -> bool
pub fn wasmer::sys::Value::null() -> Self
pub fn wasmer::sys::Value::to_string(&self) -> String
pub fn wasmer::sys::Value::ty(&self) -> Type
pub fn wasmer::sys::Value::unwrap_externref(&self) -> &Option<ExternRef>
pub fn wasmer::sys::Value::unwrap_f32(&self) -> f32
pub fn wasmer::sys::Value::unwrap_f64(&self) -> f64
pub fn wasmer::sys::Value::unwrap_funcref(&self) -> &Option<Function>
pub fn wasmer::sys::Value::unwrap_i32(&self) -> i32
pub fn wasmer::sys::Value::unwrap_i64(&self) -> i64
pub fn wasmer::sys::Value::unwrap_v128(&self) -> u128
pub fn wasmer::sys::Value::v128(&self) -> Option<u128>
pub fn wasmer::sys::WasmPtr::add_offset(self, offset: <M as >::Offset) -> Result<Self, MemoryAccessError>
pub fn wasmer::sys::WasmPtr::cast<U>(self) -> WasmPtr<U, M>
pub fn wasmer::sys::WasmPtr::clone(&self) -> Self
pub fn wasmer::sys::WasmPtr::deref<'a>(self, view: &'a MemoryView<'_>) -> WasmRef<'a, T>
pub fn wasmer::sys::WasmPtr::eq(&self, other: &Self) -> bool
pub fn wasmer::sys::WasmPtr::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn wasmer::sys::WasmPtr::from_native(n: <Self as >::Native) -> Self
pub fn wasmer::sys::WasmPtr::is_null(self) -> bool
pub fn wasmer::sys::WasmPtr::new(offset: <M as >::Offset) -> Self
pub fn wasmer::sys::WasmPtr::null() -> Self
pub fn wasmer::sys::WasmPtr::offset(self) -> <M as >::Offset
pub fn wasmer::sys::WasmPtr::read(self, view: &MemoryView<'_>) -> Result<T, MemoryAccessError>
pub fn wasmer::sys::WasmPtr::read_until(self, view: &MemoryView<'_>, end: impl FnMut(&T) -> bool) -> Result<Vec<T>, MemoryAccessError>
pub fn wasmer::sys::WasmPtr::read_utf8_string(self, view: &MemoryView<'_>, len: <M as >::Offset) -> Result<String, MemoryAccessError>
pub fn wasmer::sys::WasmPtr::read_utf8_string_with_nul(self, view: &MemoryView<'_>) -> Result<String, MemoryAccessError>
pub fn wasmer::sys::WasmPtr::slice<'a>(self, view: &'a MemoryView<'_>, len: <M as >::Offset) -> Result<WasmSlice<'a, T>, MemoryAccessError>
pub fn wasmer::sys::WasmPtr::sub_offset(self, offset: <M as >::Offset) -> Result<Self, MemoryAccessError>
pub fn wasmer::sys::WasmPtr::to_native(self) -> <Self as >::Native
pub fn wasmer::sys::WasmPtr::write(self, view: &MemoryView<'_>, val: T) -> Result<(), MemoryAccessError>
pub fn wasmer::sys::WasmPtr::zero_padding_bytes(&self, _bytes: &mut [mem::MaybeUninit<u8>])
pub fn wasmer::sys::WasmRef::as_ptr32(self) -> WasmPtr<T, Memory32>
pub fn wasmer::sys::WasmRef::as_ptr64(self) -> WasmPtr<T, Memory64>
pub fn wasmer::sys::WasmRef::as_ptr<M: MemorySize>(self) -> WasmPtr<T, M>
pub fn wasmer::sys::WasmRef::clone(&self) -> WasmRef<'a, T>
pub fn wasmer::sys::WasmRef::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn wasmer::sys::WasmRef::new(view: &'a MemoryView<'_>, offset: u64) -> Self
pub fn wasmer::sys::WasmRef::offset(self) -> u64
pub fn wasmer::sys::WasmRef::read(self) -> Result<T, MemoryAccessError>
pub fn wasmer::sys::WasmRef::write(self, val: T) -> Result<(), MemoryAccessError>
pub fn wasmer::sys::WasmSlice::as_ptr32(self) -> WasmPtr<T, Memory32>
pub fn wasmer::sys::WasmSlice::as_ptr64(self) -> WasmPtr<T, Memory64>
pub fn wasmer::sys::WasmSlice::clone(&self) -> WasmSlice<'a, T>
pub fn wasmer::sys::WasmSlice::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn wasmer::sys::WasmSlice::index(self, idx: u64) -> WasmRef<'a, T>
pub fn wasmer::sys::WasmSlice::is_empty(self) -> bool
pub fn wasmer::sys::WasmSlice::iter(self) -> WasmSliceIter<'a, T>
pub fn wasmer::sys::WasmSlice::len(self) -> u64
pub fn wasmer::sys::WasmSlice::new(view: &'a MemoryView<'_>, offset: u64, len: u64) -> Result<Self, MemoryAccessError>
pub fn wasmer::sys::WasmSlice::offset(self) -> u64
pub fn wasmer::sys::WasmSlice::read(self, idx: u64) -> Result<T, MemoryAccessError>
pub fn wasmer::sys::WasmSlice::read_slice(self, buf: &mut [T]) -> Result<(), MemoryAccessError>
pub fn wasmer::sys::WasmSlice::read_slice_uninit(self, buf: &mut [MaybeUninit<T>]) -> Result<&mut [T], MemoryAccessError>
pub fn wasmer::sys::WasmSlice::read_to_vec(self) -> Result<Vec<T>, MemoryAccessError>
pub fn wasmer::sys::WasmSlice::subslice(self, range: Range<u64>) -> WasmSlice<'a, T>
pub fn wasmer::sys::WasmSlice::write(self, idx: u64, val: T) -> Result<(), MemoryAccessError>
pub fn wasmer::sys::WasmSlice::write_slice(self, data: &[T]) -> Result<(), MemoryAccessError>
pub fn wasmer::sys::WasmSliceIter::next(&mut self) -> Option<<Self as >::Item>
pub fn wasmer::sys::WasmSliceIter::next_back(&mut self) -> Option<<Self as >::Item>
pub fn wasmer::sys::WasmSliceIter::size_hint(&self) -> (usize, Option<usize>)
pub fn wasmer::sys::WasmTypeList::empty_array() -> <Self as >::Array
pub fn wasmer::sys::WasmTypeList::wasm_types() -> &'static [Type]
pub mod wasmer::sys
pub mod wasmer::sys::vm
pub struct field wasmer::sys::BaseTunables::dynamic_memory_offset_guard_size: u64
pub struct field wasmer::sys::BaseTunables::static_memory_bound: Pages
pub struct field wasmer::sys::BaseTunables::static_memory_offset_guard_size: u64
pub struct field wasmer::sys::Instance::exports: Exports
pub struct wasmer::sys::BaseTunables
pub struct wasmer::sys::Exports
pub struct wasmer::sys::ExportsIterator<'a, I> where I: Iterator<Item = (&'a String, &'a Extern)> + Sized
pub struct wasmer::sys::Function
pub struct wasmer::sys::FunctionEnvMut<'a, T: 'a>
pub struct wasmer::sys::Global
pub struct wasmer::sys::Imports
pub struct wasmer::sys::Instance
pub struct wasmer::sys::Memory
pub struct wasmer::sys::MemoryView<'a>
pub struct wasmer::sys::Module
pub struct wasmer::sys::Store
pub struct wasmer::sys::StoreMut<'a>
pub struct wasmer::sys::StoreRef<'a>
pub struct wasmer::sys::Table
pub struct wasmer::sys::TypedFunction<Args, Rets>
pub struct wasmer::sys::WasmRef<'a, T: ValueType>
pub struct wasmer::sys::WasmSlice<'a, T: ValueType>
pub struct wasmer::sys::WasmSliceIter<'a, T: ValueType>
pub trait wasmer::sys::AsStoreMut
pub trait wasmer::sys::AsStoreRef
pub trait wasmer::sys::CompilerConfig
pub trait wasmer::sys::Exportable<'a>
pub trait wasmer::sys::FunctionMiddleware
pub trait wasmer::sys::HostFunction<T, Args, Rets, Kind> where Args: WasmTypeList, Rets: WasmTypeList, Kind: HostFunctionKind
pub trait wasmer::sys::ModuleMiddleware
pub trait wasmer::sys::NativeWasmTypeInto
pub trait wasmer::sys::Tunables
pub trait wasmer::sys::WasmTypeList where Self: Sized
pub type wasmer::sys::Exports::IntoIter = IntoIter<String, Extern>
pub type wasmer::sys::Exports::Item = (String, Extern)
pub type wasmer::sys::ExportsIterator::Item = (&'a String, &'a Extern)
pub type wasmer::sys::ExternRef::Abi = usize
pub type wasmer::sys::FromToNativeWasmType::NativeNativeWasmTypeInto
pub type wasmer::sys::Function::Abi = usize
pub type wasmer::sys::NativeFunc<Args, Rets> = TypedFunction<Args, Rets>
pub type wasmer::sys::WasmPtr64<T> = WasmPtr<T, Memory64>
pub type wasmer::sys::WasmPtr::Native = <M as MemorySize>::Native
pub type wasmer::sys::WasmSliceIter::Item = WasmRef<'a, T>
pub type wasmer::sys::WasmTypeList::ArrayAsMut<[RawValue]>
pub type wasmer::sys::WasmTypeList::CStruct
pub unsafe fn wasmer::sys::BaseTunables::create_vm_memory(&self, ty: &MemoryType, style: &MemoryStyle, vm_definition_location: NonNull<VMMemoryDefinition>) -> Result<VMMemory, MemoryError>
pub unsafe fn wasmer::sys::BaseTunables::create_vm_table(&self, ty: &TableType, style: &TableStyle, vm_definition_location: NonNull<VMTableDefinition>) -> Result<VMTable, String>
pub unsafe fn wasmer::sys::Module::deserialize(store: &impl AsStoreRef, bytes: &[u8]) -> Result<Self, DeserializeError>
pub unsafe fn wasmer::sys::Module::deserialize_from_file(store: &impl AsStoreRef, path: impl AsRef<Path>) -> Result<Self, DeserializeError>
pub unsafe fn wasmer::sys::Module::from_binary_unchecked(store: &impl AsStoreRef, binary: &[u8]) -> Result<Self, CompileError>
pub unsafe fn wasmer::sys::NativeWasmTypeInto::from_raw(store: &mut impl AsStoreMut, raw: RawValue) -> Self
pub unsafe fn wasmer::sys::Value::from_raw(store: &mut impl AsStoreMut, ty: Type, raw: RawValue) -> Self
pub unsafe fn wasmer::sys::WasmTypeList::from_array(store: &mut impl AsStoreMut, array: <Self as >::Array) -> Self
pub unsafe fn wasmer::sys::WasmTypeList::from_c_struct(store: &mut impl AsStoreMut, c_struct: <Self as >::CStruct) -> Self
pub unsafe fn wasmer::sys::WasmTypeList::from_slice(store: &mut impl AsStoreMut, slice: &[RawValue]) -> Result<Self, TryFromSliceError>
pub unsafe fn wasmer::sys::WasmTypeList::into_array(self, store: &mut impl AsStoreMut) -> <Self as >::Array
pub unsafe fn wasmer::sys::WasmTypeList::into_c_struct(self, store: &mut impl AsStoreMut) -> <Self as >::CStruct
pub unsafe fn wasmer::sys::WasmTypeList::write_c_struct_to_ptr(c_struct: <Self as >::CStruct, ptr: *mut RawValue)
pub unsafe trait wasmer::sys::FromToNativeWasmType where Self: Sized
pub unsafe trait wasmer::sys::MemorySize
pub unsafe trait wasmer::sys::ValueType
pub use wasmer::sys::Architecture
pub use wasmer::sys::Artifact
pub use wasmer::sys::Bytes
pub use wasmer::sys::CallingConvention
pub use wasmer::sys::CompileError
pub use wasmer::sys::CpuFeature
pub use wasmer::sys::Cranelift
pub use wasmer::sys::CraneliftOptLevel
pub use wasmer::sys::DeserializeError
pub use wasmer::sys::Engine
pub use wasmer::sys::EngineBuilder
pub use wasmer::sys::ExportIndex
pub use wasmer::sys::ExportType
pub use wasmer::sys::ExternType
pub use wasmer::sys::Features
pub use wasmer::sys::FrameInfo
pub use wasmer::sys::FunctionType
pub use wasmer::sys::GlobalInit
pub use wasmer::sys::GlobalType
pub use wasmer::sys::HOST
pub use wasmer::sys::ImportType
pub use wasmer::sys::LinkError
pub use wasmer::sys::LocalFunctionIndex
pub use wasmer::sys::Memory32
pub use wasmer::sys::Memory64
pub use wasmer::sys::MemoryError
pub use wasmer::sys::MemoryType
pub use wasmer::sys::MiddlewareError
pub use wasmer::sys::MiddlewareReaderState
pub use wasmer::sys::Mutability
pub use wasmer::sys::OperatingSystem
pub use wasmer::sys::Pages
pub use wasmer::sys::ParseCpuFeatureError
pub use wasmer::sys::RuntimeError
pub use wasmer::sys::SerializeError
pub use wasmer::sys::TableType
pub use wasmer::sys::Target
pub use wasmer::sys::Triple
pub use wasmer::sys::Type
pub use wasmer::sys::ValueType
pub use wasmer::sys::WASM_MAX_PAGES
pub use wasmer::sys::WASM_MIN_PAGES
pub use wasmer::sys::WASM_PAGE_SIZE
pub use wasmer::sys::WasmError
pub use wasmer::sys::WasmResult
pub use wasmer::sys::is_wasm
pub use wasmer::sys::raise_user_trap
pub use wasmer::sys::vm::MemoryError
pub use wasmer::sys::vm::MemoryStyle
pub use wasmer::sys::vm::TableStyle
pub use wasmer::sys::vm::VMExtern
pub use wasmer::sys::vm::VMMemory
pub use wasmer::sys::vm::VMMemoryDefinition
pub use wasmer::sys::vm::VMTable
pub use wasmer::sys::vm::VMTableDefinition
pub use wasmer::sys::wasmparser
pub use wasmer::sys::wat2wasm